/*
 * Snowstorm
 * SNOMED CT Terminology Server REST API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AuthoringStatsSummary;
import io.swagger.client.model.ConceptMicro;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthoringStatsApi {
    private ApiClient apiClient;

    public AuthoringStatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthoringStatsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getChangedFSNsUsingGET
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChangedFSNsUsingGETCall(String branch, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/authoring-stats/changed-fully-specified-names"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChangedFSNsUsingGETValidateBeforeCall(String branch, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getChangedFSNsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling getChangedFSNsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getChangedFSNsUsingGETCall(branch, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getChangedFSNs
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @return List&lt;ConceptMicro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConceptMicro> getChangedFSNsUsingGET(String branch, String acceptLanguage) throws ApiException {
        ApiResponse<List<ConceptMicro>> resp = getChangedFSNsUsingGETWithHttpInfo(branch, acceptLanguage);
        return resp.getData();
    }

    /**
     * getChangedFSNs
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ApiResponse&lt;List&lt;ConceptMicro&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConceptMicro>> getChangedFSNsUsingGETWithHttpInfo(String branch, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = getChangedFSNsUsingGETValidateBeforeCall(branch, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getChangedFSNs (asynchronously)
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChangedFSNsUsingGETAsync(String branch, String acceptLanguage, final ApiCallback<List<ConceptMicro>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChangedFSNsUsingGETValidateBeforeCall(branch, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInactivatedConceptsUsingGET
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInactivatedConceptsUsingGETCall(String branch, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/authoring-stats/inactivated-concepts"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInactivatedConceptsUsingGETValidateBeforeCall(String branch, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getInactivatedConceptsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling getInactivatedConceptsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getInactivatedConceptsUsingGETCall(branch, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getInactivatedConcepts
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @return List&lt;ConceptMicro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConceptMicro> getInactivatedConceptsUsingGET(String branch, String acceptLanguage) throws ApiException {
        ApiResponse<List<ConceptMicro>> resp = getInactivatedConceptsUsingGETWithHttpInfo(branch, acceptLanguage);
        return resp.getData();
    }

    /**
     * getInactivatedConcepts
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ApiResponse&lt;List&lt;ConceptMicro&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConceptMicro>> getInactivatedConceptsUsingGETWithHttpInfo(String branch, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = getInactivatedConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getInactivatedConcepts (asynchronously)
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInactivatedConceptsUsingGETAsync(String branch, String acceptLanguage, final ApiCallback<List<ConceptMicro>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInactivatedConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInactivatedSynonymsUsingGET
     * @param branch branch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInactivatedSynonymsUsingGETCall(String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/authoring-stats/inactivated-synonyms"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInactivatedSynonymsUsingGETValidateBeforeCall(String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getInactivatedSynonymsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getInactivatedSynonymsUsingGETCall(branch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getInactivatedSynonyms
     * 
     * @param branch branch (required)
     * @return List&lt;ConceptMicro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConceptMicro> getInactivatedSynonymsUsingGET(String branch) throws ApiException {
        ApiResponse<List<ConceptMicro>> resp = getInactivatedSynonymsUsingGETWithHttpInfo(branch);
        return resp.getData();
    }

    /**
     * getInactivatedSynonyms
     * 
     * @param branch branch (required)
     * @return ApiResponse&lt;List&lt;ConceptMicro&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConceptMicro>> getInactivatedSynonymsUsingGETWithHttpInfo(String branch) throws ApiException {
        com.squareup.okhttp.Call call = getInactivatedSynonymsUsingGETValidateBeforeCall(branch, null, null);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getInactivatedSynonyms (asynchronously)
     * 
     * @param branch branch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInactivatedSynonymsUsingGETAsync(String branch, final ApiCallback<List<ConceptMicro>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInactivatedSynonymsUsingGETValidateBeforeCall(branch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNewConceptsUsingGET
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNewConceptsUsingGETCall(String branch, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/authoring-stats/new-concepts"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNewConceptsUsingGETValidateBeforeCall(String branch, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getNewConceptsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling getNewConceptsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getNewConceptsUsingGETCall(branch, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getNewConcepts
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @return List&lt;ConceptMicro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConceptMicro> getNewConceptsUsingGET(String branch, String acceptLanguage) throws ApiException {
        ApiResponse<List<ConceptMicro>> resp = getNewConceptsUsingGETWithHttpInfo(branch, acceptLanguage);
        return resp.getData();
    }

    /**
     * getNewConcepts
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ApiResponse&lt;List&lt;ConceptMicro&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConceptMicro>> getNewConceptsUsingGETWithHttpInfo(String branch, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = getNewConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getNewConcepts (asynchronously)
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNewConceptsUsingGETAsync(String branch, String acceptLanguage, final ApiCallback<List<ConceptMicro>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNewConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNewSynonymsOnExistingConceptsUsingGET
     * @param branch branch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNewSynonymsOnExistingConceptsUsingGETCall(String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/authoring-stats/new-synonyms-on-existing-concepts"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNewSynonymsOnExistingConceptsUsingGETValidateBeforeCall(String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getNewSynonymsOnExistingConceptsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getNewSynonymsOnExistingConceptsUsingGETCall(branch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getNewSynonymsOnExistingConcepts
     * 
     * @param branch branch (required)
     * @return List&lt;ConceptMicro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConceptMicro> getNewSynonymsOnExistingConceptsUsingGET(String branch) throws ApiException {
        ApiResponse<List<ConceptMicro>> resp = getNewSynonymsOnExistingConceptsUsingGETWithHttpInfo(branch);
        return resp.getData();
    }

    /**
     * getNewSynonymsOnExistingConcepts
     * 
     * @param branch branch (required)
     * @return ApiResponse&lt;List&lt;ConceptMicro&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConceptMicro>> getNewSynonymsOnExistingConceptsUsingGETWithHttpInfo(String branch) throws ApiException {
        com.squareup.okhttp.Call call = getNewSynonymsOnExistingConceptsUsingGETValidateBeforeCall(branch, null, null);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getNewSynonymsOnExistingConcepts (asynchronously)
     * 
     * @param branch branch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNewSynonymsOnExistingConceptsUsingGETAsync(String branch, final ApiCallback<List<ConceptMicro>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNewSynonymsOnExistingConceptsUsingGETValidateBeforeCall(branch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReactivatedConceptsUsingGET
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReactivatedConceptsUsingGETCall(String branch, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/authoring-stats/reactivated-concepts"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReactivatedConceptsUsingGETValidateBeforeCall(String branch, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getReactivatedConceptsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling getReactivatedConceptsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getReactivatedConceptsUsingGETCall(branch, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getReactivatedConcepts
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @return List&lt;ConceptMicro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConceptMicro> getReactivatedConceptsUsingGET(String branch, String acceptLanguage) throws ApiException {
        ApiResponse<List<ConceptMicro>> resp = getReactivatedConceptsUsingGETWithHttpInfo(branch, acceptLanguage);
        return resp.getData();
    }

    /**
     * getReactivatedConcepts
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ApiResponse&lt;List&lt;ConceptMicro&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConceptMicro>> getReactivatedConceptsUsingGETWithHttpInfo(String branch, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = getReactivatedConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getReactivatedConcepts (asynchronously)
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReactivatedConceptsUsingGETAsync(String branch, String acceptLanguage, final ApiCallback<List<ConceptMicro>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReactivatedConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReactivatedSynonymsUsingGET
     * @param branch branch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReactivatedSynonymsUsingGETCall(String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/authoring-stats/reactivated-synonyms"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReactivatedSynonymsUsingGETValidateBeforeCall(String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getReactivatedSynonymsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getReactivatedSynonymsUsingGETCall(branch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getReactivatedSynonyms
     * 
     * @param branch branch (required)
     * @return List&lt;ConceptMicro&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ConceptMicro> getReactivatedSynonymsUsingGET(String branch) throws ApiException {
        ApiResponse<List<ConceptMicro>> resp = getReactivatedSynonymsUsingGETWithHttpInfo(branch);
        return resp.getData();
    }

    /**
     * getReactivatedSynonyms
     * 
     * @param branch branch (required)
     * @return ApiResponse&lt;List&lt;ConceptMicro&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ConceptMicro>> getReactivatedSynonymsUsingGETWithHttpInfo(String branch) throws ApiException {
        com.squareup.okhttp.Call call = getReactivatedSynonymsUsingGETValidateBeforeCall(branch, null, null);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getReactivatedSynonyms (asynchronously)
     * 
     * @param branch branch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReactivatedSynonymsUsingGETAsync(String branch, final ApiCallback<List<ConceptMicro>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReactivatedSynonymsUsingGETValidateBeforeCall(branch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ConceptMicro>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatsUsingGET
     * @param branch branch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatsUsingGETCall(String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/authoring-stats"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatsUsingGETValidateBeforeCall(String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getStatsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getStatsUsingGETCall(branch, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Calculate statistics for unreleased/unversioned content to be used in daily build browser.
     * Does not work on versioned content.
     * @param branch branch (required)
     * @return AuthoringStatsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthoringStatsSummary getStatsUsingGET(String branch) throws ApiException {
        ApiResponse<AuthoringStatsSummary> resp = getStatsUsingGETWithHttpInfo(branch);
        return resp.getData();
    }

    /**
     * Calculate statistics for unreleased/unversioned content to be used in daily build browser.
     * Does not work on versioned content.
     * @param branch branch (required)
     * @return ApiResponse&lt;AuthoringStatsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthoringStatsSummary> getStatsUsingGETWithHttpInfo(String branch) throws ApiException {
        com.squareup.okhttp.Call call = getStatsUsingGETValidateBeforeCall(branch, null, null);
        Type localVarReturnType = new TypeToken<AuthoringStatsSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculate statistics for unreleased/unversioned content to be used in daily build browser. (asynchronously)
     * Does not work on versioned content.
     * @param branch branch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatsUsingGETAsync(String branch, final ApiCallback<AuthoringStatsSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatsUsingGETValidateBeforeCall(branch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthoringStatsSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
