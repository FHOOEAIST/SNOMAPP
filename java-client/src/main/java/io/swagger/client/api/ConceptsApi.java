/*
 * Snowstorm
 * SNOMED CT Terminology Server REST API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AsyncConceptChangeBatch;
import io.swagger.client.model.CollectionConceptMini;
import io.swagger.client.model.ConceptDescriptionsResult;
import io.swagger.client.model.ConceptMini;
import io.swagger.client.model.ConceptReferencesResult;
import io.swagger.client.model.ConceptView;
import io.swagger.client.model.Expression;
import io.swagger.client.model.ExpressionStringPojo;
import io.swagger.client.model.InboundRelationshipsResult;
import io.swagger.client.model.ItemsPageConcept;
import io.swagger.client.model.ItemsPageConceptMini;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConceptsApi {
    private ApiClient apiClient;

    public ConceptsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConceptsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for findBrowserConceptUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findBrowserConceptUsingGETCall(String branch, String conceptId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/{branch}/concepts/{conceptId}"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findBrowserConceptUsingGETValidateBeforeCall(String branch, String conceptId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findBrowserConceptUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling findBrowserConceptUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling findBrowserConceptUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findBrowserConceptUsingGETCall(branch, conceptId, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Load a concept in the browser format.
     * During content authoring previous versions of the concept can be loaded from version control. To do this use the branch path format {branch@yyyy-MM-ddTHH:mm:ss.SSSZ} or {branch@epoch_milliseconds}. The version of the concept when the branch was created can be loaded using {branch@-}.
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ConceptView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConceptView findBrowserConceptUsingGET(String branch, String conceptId, String acceptLanguage) throws ApiException {
        ApiResponse<ConceptView> resp = findBrowserConceptUsingGETWithHttpInfo(branch, conceptId, acceptLanguage);
        return resp.getData();
    }

    /**
     * Load a concept in the browser format.
     * During content authoring previous versions of the concept can be loaded from version control. To do this use the branch path format {branch@yyyy-MM-ddTHH:mm:ss.SSSZ} or {branch@epoch_milliseconds}. The version of the concept when the branch was created can be loaded using {branch@-}.
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ApiResponse&lt;ConceptView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConceptView> findBrowserConceptUsingGETWithHttpInfo(String branch, String conceptId, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = findBrowserConceptUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ConceptView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Load a concept in the browser format. (asynchronously)
     * During content authoring previous versions of the concept can be loaded from version control. To do this use the branch path format {branch@yyyy-MM-ddTHH:mm:ss.SSSZ} or {branch@epoch_milliseconds}. The version of the concept when the branch was created can be loaded using {branch@-}.
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findBrowserConceptUsingGETAsync(String branch, String conceptId, String acceptLanguage, final ApiCallback<ConceptView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findBrowserConceptUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConceptView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConceptAncestorsUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConceptAncestorsUsingGETCall(String branch, String conceptId, String acceptLanguage, String form, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/{branch}/concepts/{conceptId}/ancestors"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (form != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("form", form));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConceptAncestorsUsingGETValidateBeforeCall(String branch, String conceptId, String acceptLanguage, String form, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findConceptAncestorsUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling findConceptAncestorsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling findConceptAncestorsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findConceptAncestorsUsingGETCall(branch, conceptId, acceptLanguage, form, progressListener, progressRequestListener);
        return call;

    }

    /**
     * findConceptAncestors
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @return CollectionConceptMini
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionConceptMini findConceptAncestorsUsingGET(String branch, String conceptId, String acceptLanguage, String form) throws ApiException {
        ApiResponse<CollectionConceptMini> resp = findConceptAncestorsUsingGETWithHttpInfo(branch, conceptId, acceptLanguage, form);
        return resp.getData();
    }

    /**
     * findConceptAncestors
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @return ApiResponse&lt;CollectionConceptMini&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionConceptMini> findConceptAncestorsUsingGETWithHttpInfo(String branch, String conceptId, String acceptLanguage, String form) throws ApiException {
        com.squareup.okhttp.Call call = findConceptAncestorsUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, form, null, null);
        Type localVarReturnType = new TypeToken<CollectionConceptMini>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findConceptAncestors (asynchronously)
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConceptAncestorsUsingGETAsync(String branch, String conceptId, String acceptLanguage, String form, final ApiCallback<CollectionConceptMini> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConceptAncestorsUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, form, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionConceptMini>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConceptChildrenUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConceptChildrenUsingGETCall(String branch, String conceptId, String acceptLanguage, String form, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/{branch}/concepts/{conceptId}/children"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (form != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("form", form));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConceptChildrenUsingGETValidateBeforeCall(String branch, String conceptId, String acceptLanguage, String form, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findConceptChildrenUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling findConceptChildrenUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling findConceptChildrenUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findConceptChildrenUsingGETCall(branch, conceptId, acceptLanguage, form, progressListener, progressRequestListener);
        return call;

    }

    /**
     * findConceptChildren
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @return CollectionConceptMini
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionConceptMini findConceptChildrenUsingGET(String branch, String conceptId, String acceptLanguage, String form) throws ApiException {
        ApiResponse<CollectionConceptMini> resp = findConceptChildrenUsingGETWithHttpInfo(branch, conceptId, acceptLanguage, form);
        return resp.getData();
    }

    /**
     * findConceptChildren
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @return ApiResponse&lt;CollectionConceptMini&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionConceptMini> findConceptChildrenUsingGETWithHttpInfo(String branch, String conceptId, String acceptLanguage, String form) throws ApiException {
        com.squareup.okhttp.Call call = findConceptChildrenUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, form, null, null);
        Type localVarReturnType = new TypeToken<CollectionConceptMini>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findConceptChildren (asynchronously)
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConceptChildrenUsingGETAsync(String branch, String conceptId, String acceptLanguage, String form, final ApiCallback<CollectionConceptMini> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConceptChildrenUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, form, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionConceptMini>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConceptDescendantsUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param stated stated (optional, default to false)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 50)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConceptDescendantsUsingGETCall(String branch, String conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/concepts/{conceptId}/descendants"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stated", stated));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConceptDescendantsUsingGETValidateBeforeCall(String branch, String conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findConceptDescendantsUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling findConceptDescendantsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling findConceptDescendantsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findConceptDescendantsUsingGETCall(branch, conceptId, acceptLanguage, stated, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * findConceptDescendants
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param stated stated (optional, default to false)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 50)
     * @return ItemsPageConceptMini
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemsPageConceptMini findConceptDescendantsUsingGET(String branch, String conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ItemsPageConceptMini> resp = findConceptDescendantsUsingGETWithHttpInfo(branch, conceptId, acceptLanguage, stated, offset, limit);
        return resp.getData();
    }

    /**
     * findConceptDescendants
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param stated stated (optional, default to false)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 50)
     * @return ApiResponse&lt;ItemsPageConceptMini&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemsPageConceptMini> findConceptDescendantsUsingGETWithHttpInfo(String branch, String conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = findConceptDescendantsUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, stated, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<ItemsPageConceptMini>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findConceptDescendants (asynchronously)
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param stated stated (optional, default to false)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 50)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConceptDescendantsUsingGETAsync(String branch, String conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit, final ApiCallback<ItemsPageConceptMini> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConceptDescendantsUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, stated, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemsPageConceptMini>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConceptDescriptionsUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConceptDescriptionsUsingGETCall(String branch, String conceptId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/concepts/{conceptId}/descriptions"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConceptDescriptionsUsingGETValidateBeforeCall(String branch, String conceptId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findConceptDescriptionsUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling findConceptDescriptionsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling findConceptDescriptionsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findConceptDescriptionsUsingGETCall(branch, conceptId, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * findConceptDescriptions
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ConceptDescriptionsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConceptDescriptionsResult findConceptDescriptionsUsingGET(String branch, String conceptId, String acceptLanguage) throws ApiException {
        ApiResponse<ConceptDescriptionsResult> resp = findConceptDescriptionsUsingGETWithHttpInfo(branch, conceptId, acceptLanguage);
        return resp.getData();
    }

    /**
     * findConceptDescriptions
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ApiResponse&lt;ConceptDescriptionsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConceptDescriptionsResult> findConceptDescriptionsUsingGETWithHttpInfo(String branch, String conceptId, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = findConceptDescriptionsUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ConceptDescriptionsResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findConceptDescriptions (asynchronously)
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConceptDescriptionsUsingGETAsync(String branch, String conceptId, String acceptLanguage, final ApiCallback<ConceptDescriptionsResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConceptDescriptionsUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConceptDescriptionsResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConceptInboundRelationshipsUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConceptInboundRelationshipsUsingGETCall(String branch, String conceptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/concepts/{conceptId}/inbound-relationships"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConceptInboundRelationshipsUsingGETValidateBeforeCall(String branch, String conceptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findConceptInboundRelationshipsUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling findConceptInboundRelationshipsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findConceptInboundRelationshipsUsingGETCall(branch, conceptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * findConceptInboundRelationships
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @return InboundRelationshipsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InboundRelationshipsResult findConceptInboundRelationshipsUsingGET(String branch, String conceptId) throws ApiException {
        ApiResponse<InboundRelationshipsResult> resp = findConceptInboundRelationshipsUsingGETWithHttpInfo(branch, conceptId);
        return resp.getData();
    }

    /**
     * findConceptInboundRelationships
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @return ApiResponse&lt;InboundRelationshipsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InboundRelationshipsResult> findConceptInboundRelationshipsUsingGETWithHttpInfo(String branch, String conceptId) throws ApiException {
        com.squareup.okhttp.Call call = findConceptInboundRelationshipsUsingGETValidateBeforeCall(branch, conceptId, null, null);
        Type localVarReturnType = new TypeToken<InboundRelationshipsResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findConceptInboundRelationships (asynchronously)
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConceptInboundRelationshipsUsingGETAsync(String branch, String conceptId, final ApiCallback<InboundRelationshipsResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConceptInboundRelationshipsUsingGETValidateBeforeCall(branch, conceptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InboundRelationshipsResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConceptParentsUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConceptParentsUsingGETCall(String branch, String conceptId, String acceptLanguage, String form, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/{branch}/concepts/{conceptId}/parents"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (form != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("form", form));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConceptParentsUsingGETValidateBeforeCall(String branch, String conceptId, String acceptLanguage, String form, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findConceptParentsUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling findConceptParentsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling findConceptParentsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findConceptParentsUsingGETCall(branch, conceptId, acceptLanguage, form, progressListener, progressRequestListener);
        return call;

    }

    /**
     * findConceptParents
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @return CollectionConceptMini
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollectionConceptMini findConceptParentsUsingGET(String branch, String conceptId, String acceptLanguage, String form) throws ApiException {
        ApiResponse<CollectionConceptMini> resp = findConceptParentsUsingGETWithHttpInfo(branch, conceptId, acceptLanguage, form);
        return resp.getData();
    }

    /**
     * findConceptParents
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @return ApiResponse&lt;CollectionConceptMini&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollectionConceptMini> findConceptParentsUsingGETWithHttpInfo(String branch, String conceptId, String acceptLanguage, String form) throws ApiException {
        com.squareup.okhttp.Call call = findConceptParentsUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, form, null, null);
        Type localVarReturnType = new TypeToken<CollectionConceptMini>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findConceptParents (asynchronously)
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param form form (optional, default to inferred)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConceptParentsUsingGETAsync(String branch, String conceptId, String acceptLanguage, String form, final ApiCallback<CollectionConceptMini> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConceptParentsUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, form, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollectionConceptMini>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConceptReferencesUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param stated stated (optional, default to false)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 1000)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConceptReferencesUsingGETCall(String branch, Long conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/concepts/{conceptId}/references"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (stated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stated", stated));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConceptReferencesUsingGETValidateBeforeCall(String branch, Long conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findConceptReferencesUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling findConceptReferencesUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling findConceptReferencesUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findConceptReferencesUsingGETCall(branch, conceptId, acceptLanguage, stated, offset, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find concepts which reference this concept in the inferred or stated form (including stated axioms).
     * Pagination works on the referencing concepts. A referencing concept may have one or more references of different types.
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param stated stated (optional, default to false)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 1000)
     * @return ConceptReferencesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConceptReferencesResult findConceptReferencesUsingGET(String branch, Long conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit) throws ApiException {
        ApiResponse<ConceptReferencesResult> resp = findConceptReferencesUsingGETWithHttpInfo(branch, conceptId, acceptLanguage, stated, offset, limit);
        return resp.getData();
    }

    /**
     * Find concepts which reference this concept in the inferred or stated form (including stated axioms).
     * Pagination works on the referencing concepts. A referencing concept may have one or more references of different types.
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param stated stated (optional, default to false)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 1000)
     * @return ApiResponse&lt;ConceptReferencesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConceptReferencesResult> findConceptReferencesUsingGETWithHttpInfo(String branch, Long conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = findConceptReferencesUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, stated, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<ConceptReferencesResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find concepts which reference this concept in the inferred or stated form (including stated axioms). (asynchronously)
     * Pagination works on the referencing concepts. A referencing concept may have one or more references of different types.
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param stated stated (optional, default to false)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 1000)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConceptReferencesUsingGETAsync(String branch, Long conceptId, String acceptLanguage, Boolean stated, Integer offset, Integer limit, final ApiCallback<ConceptReferencesResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConceptReferencesUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, stated, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConceptReferencesResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConceptUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConceptUsingGETCall(String branch, String conceptId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/concepts/{conceptId}"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConceptUsingGETValidateBeforeCall(String branch, String conceptId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findConceptUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling findConceptUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling findConceptUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findConceptUsingGETCall(branch, conceptId, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * findConcept
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ConceptMini
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConceptMini findConceptUsingGET(String branch, String conceptId, String acceptLanguage) throws ApiException {
        ApiResponse<ConceptMini> resp = findConceptUsingGETWithHttpInfo(branch, conceptId, acceptLanguage);
        return resp.getData();
    }

    /**
     * findConcept
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ApiResponse&lt;ConceptMini&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConceptMini> findConceptUsingGETWithHttpInfo(String branch, String conceptId, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = findConceptUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<ConceptMini>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findConcept (asynchronously)
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConceptUsingGETAsync(String branch, String conceptId, String acceptLanguage, final ApiCallback<ConceptMini> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConceptUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConceptMini>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConceptsUsingGET
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param activeFilter activeFilter (optional)
     * @param definitionStatusFilter definitionStatusFilter (optional)
     * @param term term (optional)
     * @param termActive termActive (optional)
     * @param ecl ecl (optional)
     * @param statedEcl statedEcl (optional)
     * @param conceptIds conceptIds (optional)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 50)
     * @param searchAfter searchAfter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConceptsUsingGETCall(String branch, String acceptLanguage, Boolean activeFilter, String definitionStatusFilter, String term, Boolean termActive, String ecl, String statedEcl, List<String> conceptIds, Integer offset, Integer limit, String searchAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/concepts"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (activeFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("activeFilter", activeFilter));
        if (definitionStatusFilter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("definitionStatusFilter", definitionStatusFilter));
        if (term != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("term", term));
        if (termActive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("termActive", termActive));
        if (ecl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ecl", ecl));
        if (statedEcl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statedEcl", statedEcl));
        if (conceptIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "conceptIds", conceptIds));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (searchAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchAfter", searchAfter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/csv"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConceptsUsingGETValidateBeforeCall(String branch, String acceptLanguage, Boolean activeFilter, String definitionStatusFilter, String term, Boolean termActive, String ecl, String statedEcl, List<String> conceptIds, Integer offset, Integer limit, String searchAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling findConceptsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling findConceptsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = findConceptsUsingGETCall(branch, acceptLanguage, activeFilter, definitionStatusFilter, term, termActive, ecl, statedEcl, conceptIds, offset, limit, searchAfter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * findConcepts
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param activeFilter activeFilter (optional)
     * @param definitionStatusFilter definitionStatusFilter (optional)
     * @param term term (optional)
     * @param termActive termActive (optional)
     * @param ecl ecl (optional)
     * @param statedEcl statedEcl (optional)
     * @param conceptIds conceptIds (optional)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 50)
     * @param searchAfter searchAfter (optional)
     * @return ItemsPageConceptMini
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemsPageConceptMini findConceptsUsingGET(String branch, String acceptLanguage, Boolean activeFilter, String definitionStatusFilter, String term, Boolean termActive, String ecl, String statedEcl, List<String> conceptIds, Integer offset, Integer limit, String searchAfter) throws ApiException {
        ApiResponse<ItemsPageConceptMini> resp = findConceptsUsingGETWithHttpInfo(branch, acceptLanguage, activeFilter, definitionStatusFilter, term, termActive, ecl, statedEcl, conceptIds, offset, limit, searchAfter);
        return resp.getData();
    }

    /**
     * findConcepts
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param activeFilter activeFilter (optional)
     * @param definitionStatusFilter definitionStatusFilter (optional)
     * @param term term (optional)
     * @param termActive termActive (optional)
     * @param ecl ecl (optional)
     * @param statedEcl statedEcl (optional)
     * @param conceptIds conceptIds (optional)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 50)
     * @param searchAfter searchAfter (optional)
     * @return ApiResponse&lt;ItemsPageConceptMini&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemsPageConceptMini> findConceptsUsingGETWithHttpInfo(String branch, String acceptLanguage, Boolean activeFilter, String definitionStatusFilter, String term, Boolean termActive, String ecl, String statedEcl, List<String> conceptIds, Integer offset, Integer limit, String searchAfter) throws ApiException {
        com.squareup.okhttp.Call call = findConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, activeFilter, definitionStatusFilter, term, termActive, ecl, statedEcl, conceptIds, offset, limit, searchAfter, null, null);
        Type localVarReturnType = new TypeToken<ItemsPageConceptMini>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * findConcepts (asynchronously)
     * 
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param activeFilter activeFilter (optional)
     * @param definitionStatusFilter definitionStatusFilter (optional)
     * @param term term (optional)
     * @param termActive termActive (optional)
     * @param ecl ecl (optional)
     * @param statedEcl statedEcl (optional)
     * @param conceptIds conceptIds (optional)
     * @param offset offset (optional, default to 0)
     * @param limit limit (optional, default to 50)
     * @param searchAfter searchAfter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConceptsUsingGETAsync(String branch, String acceptLanguage, Boolean activeFilter, String definitionStatusFilter, String term, Boolean termActive, String ecl, String statedEcl, List<String> conceptIds, Integer offset, Integer limit, String searchAfter, final ApiCallback<ItemsPageConceptMini> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, activeFilter, definitionStatusFilter, term, termActive, ecl, statedEcl, conceptIds, offset, limit, searchAfter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemsPageConceptMini>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBrowserConceptsUsingGET
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param number number (optional, default to 0)
     * @param size size (optional, default to 100)
     * @param searchAfter searchAfter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBrowserConceptsUsingGETCall(String branch, String acceptLanguage, Integer number, Integer size, String searchAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/{branch}/concepts"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (number != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("number", number));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (searchAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchAfter", searchAfter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBrowserConceptsUsingGETValidateBeforeCall(String branch, String acceptLanguage, Integer number, Integer size, String searchAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getBrowserConceptsUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling getBrowserConceptsUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getBrowserConceptsUsingGETCall(branch, acceptLanguage, number, size, searchAfter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Load concepts in the browser format.
     * When enabled &#39;searchAfter&#39; can be used for unlimited pagination. Load the first page then take the &#39;searchAfter&#39; value from the response and use that as a parameter in the next page request instead of &#39;number&#39;.
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param number number (optional, default to 0)
     * @param size size (optional, default to 100)
     * @param searchAfter searchAfter (optional)
     * @return ItemsPageConcept
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ItemsPageConcept getBrowserConceptsUsingGET(String branch, String acceptLanguage, Integer number, Integer size, String searchAfter) throws ApiException {
        ApiResponse<ItemsPageConcept> resp = getBrowserConceptsUsingGETWithHttpInfo(branch, acceptLanguage, number, size, searchAfter);
        return resp.getData();
    }

    /**
     * Load concepts in the browser format.
     * When enabled &#39;searchAfter&#39; can be used for unlimited pagination. Load the first page then take the &#39;searchAfter&#39; value from the response and use that as a parameter in the next page request instead of &#39;number&#39;.
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param number number (optional, default to 0)
     * @param size size (optional, default to 100)
     * @param searchAfter searchAfter (optional)
     * @return ApiResponse&lt;ItemsPageConcept&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ItemsPageConcept> getBrowserConceptsUsingGETWithHttpInfo(String branch, String acceptLanguage, Integer number, Integer size, String searchAfter) throws ApiException {
        com.squareup.okhttp.Call call = getBrowserConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, number, size, searchAfter, null, null);
        Type localVarReturnType = new TypeToken<ItemsPageConcept>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Load concepts in the browser format. (asynchronously)
     * When enabled &#39;searchAfter&#39; can be used for unlimited pagination. Load the first page then take the &#39;searchAfter&#39; value from the response and use that as a parameter in the next page request instead of &#39;number&#39;.
     * @param branch branch (required)
     * @param acceptLanguage Accept-Language (required)
     * @param number number (optional, default to 0)
     * @param size size (optional, default to 100)
     * @param searchAfter searchAfter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBrowserConceptsUsingGETAsync(String branch, String acceptLanguage, Integer number, Integer size, String searchAfter, final ApiCallback<ItemsPageConcept> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBrowserConceptsUsingGETValidateBeforeCall(branch, acceptLanguage, number, size, searchAfter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ItemsPageConcept>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConceptAuthoringFormUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConceptAuthoringFormUsingGETCall(String branch, String conceptId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/concepts/{conceptId}/authoring-form"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConceptAuthoringFormUsingGETValidateBeforeCall(String branch, String conceptId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getConceptAuthoringFormUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling getConceptAuthoringFormUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling getConceptAuthoringFormUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getConceptAuthoringFormUsingGETCall(branch, conceptId, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getConceptAuthoringForm
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @return Expression
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Expression getConceptAuthoringFormUsingGET(String branch, String conceptId, String acceptLanguage) throws ApiException {
        ApiResponse<Expression> resp = getConceptAuthoringFormUsingGETWithHttpInfo(branch, conceptId, acceptLanguage);
        return resp.getData();
    }

    /**
     * getConceptAuthoringForm
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @return ApiResponse&lt;Expression&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Expression> getConceptAuthoringFormUsingGETWithHttpInfo(String branch, String conceptId, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = getConceptAuthoringFormUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<Expression>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getConceptAuthoringForm (asynchronously)
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConceptAuthoringFormUsingGETAsync(String branch, String conceptId, String acceptLanguage, final ApiCallback<Expression> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConceptAuthoringFormUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Expression>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConceptBulkChangeUsingGET
     * @param branch branch (required)
     * @param bulkChangeId bulkChangeId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConceptBulkChangeUsingGETCall(String branch, String bulkChangeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/browser/{branch}/concepts/bulk/{bulkChangeId}"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "bulkChangeId" + "\\}", apiClient.escapeString(bulkChangeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConceptBulkChangeUsingGETValidateBeforeCall(String branch, String bulkChangeId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getConceptBulkChangeUsingGET(Async)");
        }
        
        // verify the required parameter 'bulkChangeId' is set
        if (bulkChangeId == null) {
            throw new ApiException("Missing the required parameter 'bulkChangeId' when calling getConceptBulkChangeUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getConceptBulkChangeUsingGETCall(branch, bulkChangeId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch the status of a bulk concept creation or update.
     * 
     * @param branch branch (required)
     * @param bulkChangeId bulkChangeId (required)
     * @return AsyncConceptChangeBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AsyncConceptChangeBatch getConceptBulkChangeUsingGET(String branch, String bulkChangeId) throws ApiException {
        ApiResponse<AsyncConceptChangeBatch> resp = getConceptBulkChangeUsingGETWithHttpInfo(branch, bulkChangeId);
        return resp.getData();
    }

    /**
     * Fetch the status of a bulk concept creation or update.
     * 
     * @param branch branch (required)
     * @param bulkChangeId bulkChangeId (required)
     * @return ApiResponse&lt;AsyncConceptChangeBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AsyncConceptChangeBatch> getConceptBulkChangeUsingGETWithHttpInfo(String branch, String bulkChangeId) throws ApiException {
        com.squareup.okhttp.Call call = getConceptBulkChangeUsingGETValidateBeforeCall(branch, bulkChangeId, null, null);
        Type localVarReturnType = new TypeToken<AsyncConceptChangeBatch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch the status of a bulk concept creation or update. (asynchronously)
     * 
     * @param branch branch (required)
     * @param bulkChangeId bulkChangeId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConceptBulkChangeUsingGETAsync(String branch, String bulkChangeId, final ApiCallback<AsyncConceptChangeBatch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConceptBulkChangeUsingGETValidateBeforeCall(branch, bulkChangeId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AsyncConceptChangeBatch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConceptNormalFormUsingGET
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param statedView statedView (optional, default to false)
     * @param includeTerms includeTerms (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConceptNormalFormUsingGETCall(String branch, String conceptId, String acceptLanguage, Boolean statedView, Boolean includeTerms, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{branch}/concepts/{conceptId}/normal-form"
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()))
            .replaceAll("\\{" + "conceptId" + "\\}", apiClient.escapeString(conceptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (statedView != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statedView", statedView));
        if (includeTerms != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeTerms", includeTerms));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConceptNormalFormUsingGETValidateBeforeCall(String branch, String conceptId, String acceptLanguage, Boolean statedView, Boolean includeTerms, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getConceptNormalFormUsingGET(Async)");
        }
        
        // verify the required parameter 'conceptId' is set
        if (conceptId == null) {
            throw new ApiException("Missing the required parameter 'conceptId' when calling getConceptNormalFormUsingGET(Async)");
        }
        
        // verify the required parameter 'acceptLanguage' is set
        if (acceptLanguage == null) {
            throw new ApiException("Missing the required parameter 'acceptLanguage' when calling getConceptNormalFormUsingGET(Async)");
        }
        

        com.squareup.okhttp.Call call = getConceptNormalFormUsingGETCall(branch, conceptId, acceptLanguage, statedView, includeTerms, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getConceptNormalForm
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param statedView statedView (optional, default to false)
     * @param includeTerms includeTerms (optional, default to false)
     * @return ExpressionStringPojo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ExpressionStringPojo getConceptNormalFormUsingGET(String branch, String conceptId, String acceptLanguage, Boolean statedView, Boolean includeTerms) throws ApiException {
        ApiResponse<ExpressionStringPojo> resp = getConceptNormalFormUsingGETWithHttpInfo(branch, conceptId, acceptLanguage, statedView, includeTerms);
        return resp.getData();
    }

    /**
     * getConceptNormalForm
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param statedView statedView (optional, default to false)
     * @param includeTerms includeTerms (optional, default to false)
     * @return ApiResponse&lt;ExpressionStringPojo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ExpressionStringPojo> getConceptNormalFormUsingGETWithHttpInfo(String branch, String conceptId, String acceptLanguage, Boolean statedView, Boolean includeTerms) throws ApiException {
        com.squareup.okhttp.Call call = getConceptNormalFormUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, statedView, includeTerms, null, null);
        Type localVarReturnType = new TypeToken<ExpressionStringPojo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getConceptNormalForm (asynchronously)
     * 
     * @param branch branch (required)
     * @param conceptId conceptId (required)
     * @param acceptLanguage Accept-Language (required)
     * @param statedView statedView (optional, default to false)
     * @param includeTerms includeTerms (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConceptNormalFormUsingGETAsync(String branch, String conceptId, String acceptLanguage, Boolean statedView, Boolean includeTerms, final ApiCallback<ExpressionStringPojo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConceptNormalFormUsingGETValidateBeforeCall(branch, conceptId, acceptLanguage, statedView, includeTerms, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ExpressionStringPojo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
